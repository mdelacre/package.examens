xlab = "Mean")
axis(1, at = seq(0,1000,100), labels = seq(140,150,1), las = 1)
axis(2, at = seq(0,1,0.1), labels = seq(0,1,0.1), las = 1)
lines(sgpv_list, type="l", col = "darkgrey", lwd = 3, lty = 3)
lines(p_tost_list, lwd = 3)
step = 0.01
p_tost_list <- numeric(length(seq(140, 150, step)))
sgpv_list <- numeric(length(seq(140, 150, step)))
p_list <- numeric(length(seq(140, 150, step)))
t_list <- numeric(length(seq(140, 150, step)))
m <- i
mu <- 145
sd <- 2
n <- 30
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
for(i in seq(140, 150, step)){
count <- count + 1
m <- i
mu <- 145
sd <- 2
n <- 30
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
res <- TOSTone.raw(m = m,
mu = mu,
sd = sd,
n = n,
low_eqbound = low_eqbound,
high_eqbound = high_eqbound,
alpha = alpha,
plot = FALSE,
verbose = FALSE
)
t <- (m - mu)/(sd/sqrt(n))
t_list[count] <- t
sgpv_list[count] <- p_delta(mu+res$LL_CI_TTEST, mu+res$UL_CI_TTEST, mu+low_eqbound, mu+high_eqbound)
p_tost_list[count] <- max(res$TOST_p1, res$TOST_p2)
p_list[count] <- 2 * pt(-abs(t), df = n-1)
}
library(TOSTER)
step = 0.01
p_tost_list <- numeric(length(seq(140, 150, step)))
sgpv_list <- numeric(length(seq(140, 150, step)))
p_list <- numeric(length(seq(140, 150, step)))
t_list <- numeric(length(seq(140, 150, step)))
count <- 0
for(i in seq(140, 150, step)){
count <- count + 1
m <- i
mu <- 145
sd <- 2
n <- 30
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
res <- TOSTone.raw(m = m,
mu = mu,
sd = sd,
n = n,
low_eqbound = low_eqbound,
high_eqbound = high_eqbound,
alpha = alpha,
plot = FALSE,
verbose = FALSE
)
t <- (m - mu)/(sd/sqrt(n))
t_list[count] <- t
sgpv_list[count] <- p_delta(mu+res$LL_CI_TTEST, mu+res$UL_CI_TTEST, mu+low_eqbound, mu+high_eqbound)
p_tost_list[count] <- max(res$TOST_p1, res$TOST_p2)
p_list[count] <- 2 * pt(-abs(t), df = n-1)
}
```
```{r, echo=FALSE, dpi=600, fig.width=6, fig.height=5}
plot(NA,
ylim = c(0, 1),
xlim = c(0, 1001),
yaxt = "n",
xaxt = "n",
ylab = "",
xlab = "Mean")
axis(1, at = seq(0,1000,100), labels = seq(140,150,1), las = 1)
axis(2, at = seq(0,1,0.1), labels = seq(0,1,0.1), las = 1)
lines(sgpv_list, type="l", col = "darkgrey", lwd = 3, lty = 3)
lines(p_tost_list, lwd = 3)
#abline(h = c(0.975, 0.5, 0.025), col = "grey", lwd = 1, lty = 3)
sgpv_list
p_tost_lis
p_tost_list
#Create SGPV funtion from https://github.com/LucyMcGowan/sgpvalue/blob/master/R/p_delta.R
#' Second Generation P-value
p_delta <- function(lb, ub, delta_lb, delta_ub) {
# special case: infinite CI and H0 bounds in the same direction
if ((delta_lb == -Inf & lb == -Inf) | (delta_ub == Inf & ub == Inf)) {
return(1)
}
# usual case: non-point CI & non-point Ho
# pdelta = |CI intersect Ho| / min{ |CI|, 2|Ho| }
if (delta_lb != delta_ub & lb != ub) {
if (lb > delta_ub | ub < delta_lb) {
return(0)
} else if(lb > delta_lb & ub < delta_ub){
return(1)
} else {
return(
(min(ub, delta_ub) - max(lb, delta_lb)) /
min(ub - lb, 2 * (delta_ub - delta_lb))
)
}
}
# special case 1: point CI, w/ or w/out a point H0
# pdelta = 0 if CI is inside the Ho
# pdelta = 1 if CI is inside the Ho
if (lb == ub) {
if (lb <= delta_ub & lb >= delta_lb){
return(1)
} else {
return(0)
}
}
# special case 2: point H0 & non-point CI
# pdelta = 1/2 if H0 is inside the CI
# pdelta = 0 if H0 is outside the CI
if (delta_lb == delta_ub & lb != ub) {
if (delta_lb <= ub & delta_lb >= lb) {
return(1/2)
} else {
return(0)
}
}
}
step = 0.01
p_tost_list <- numeric(length(seq(140, 150, step)))
sgpv_list <- numeric(length(seq(140, 150, step)))
p_list <- numeric(length(seq(140, 150, step)))
t_list <- numeric(length(seq(140, 150, step)))
count <- 0
for(i in seq(140, 150, step)){
count <- count + 1
m <- i
mu <- 145
sd <- 2
n <- 30
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
res <- TOSTone.raw(m = m,
mu = mu,
sd = sd,
n = n,
low_eqbound = low_eqbound,
high_eqbound = high_eqbound,
alpha = alpha,
plot = FALSE,
verbose = FALSE
)
t <- (m - mu)/(sd/sqrt(n))
t_list[count] <- t
sgpv_list[count] <- p_delta(mu+res$LL_CI_TTEST, mu+res$UL_CI_TTEST, mu+low_eqbound, mu+high_eqbound)
p_tost_list[count] <- max(res$TOST_p1, res$TOST_p2)
p_list[count] <- 2 * pt(-abs(t), df = n-1)
}
```
```{r, echo=FALSE, dpi=600, fig.width=6, fig.height=5}
plot(NA,
ylim = c(0, 1),
xlim = c(0, 1001),
yaxt = "n",
xaxt = "n",
ylab = "",
xlab = "Mean")
axis(1, at = seq(0,1000,100), labels = seq(140,150,1), las = 1)
axis(2, at = seq(0,1,0.1), labels = seq(0,1,0.1), las = 1)
lines(sgpv_list, type="l", col = "darkgrey", lwd = 3, lty = 3)
lines(p_tost_list, lwd = 3)
#abline(h = c(0.975, 0.5, 0.025), col = "grey", lwd = 1, lty = 3)
step = 0.01
p_tost_list <- numeric(length(seq(140, 150, step)))
sgpv_list <- numeric(length(seq(140, 150, step)))
p_list <- numeric(length(seq(140, 150, step)))
t_list <- numeric(length(seq(140, 150, step)))
count <- 0
for(i in seq(140, 150, step)){
count <- count + 1
m <- i
mu <- 145
sd <- 2
n <- 100
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
res <- TOSTone.raw(m = m,
mu = mu,
sd = sd,
n = n,
low_eqbound = low_eqbound,
high_eqbound = high_eqbound,
alpha = alpha,
plot = FALSE,
verbose = FALSE
)
t <- (m - mu)/(sd/sqrt(n))
t_list[count] <- t
sgpv_list[count] <- p_delta(mu+res$LL_CI_TTEST, mu+res$UL_CI_TTEST, mu+low_eqbound, mu+high_eqbound)
p_tost_list[count] <- max(res$TOST_p1, res$TOST_p2)
p_list[count] <- 2 * pt(-abs(t), df = n-1)
}
```
```{r, echo=FALSE, dpi=600, fig.width=6, fig.height=5}
plot(NA,
ylim = c(0, 1),
xlim = c(0, 1001),
yaxt = "n",
xaxt = "n",
ylab = "",
xlab = "Mean")
axis(1, at = seq(0,1000,100), labels = seq(140,150,1), las = 1)
axis(2, at = seq(0,1,0.1), labels = seq(0,1,0.1), las = 1)
lines(sgpv_list, type="l", col = "darkgrey", lwd = 3, lty = 3)
lines(p_tost_list, lwd = 3)
#abline(h = c(0.975, 0.5, 0.025), col = "grey", lwd = 1, lty = 3)
step = 0.01
p_tost_list <- numeric(length(seq(140, 150, step)))
sgpv_list <- numeric(length(seq(140, 150, step)))
p_list <- numeric(length(seq(140, 150, step)))
t_list <- numeric(length(seq(140, 150, step)))
count <- 0
for(i in seq(140, 150, step)){
count <- count + 1
m <- i
mu <- 145
sd <- 2
n <- 30
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
res <- TOSTone.raw(m = m,
mu = mu,
sd = sd,
n = n,
low_eqbound = low_eqbound,
high_eqbound = high_eqbound,
alpha = alpha,
plot = FALSE,
verbose = FALSE
)
t <- (m - mu)/(sd/sqrt(n))
t_list[count] <- t
sgpv_list[count] <- p_delta(mu+res$LL_CI_TTEST, mu+res$UL_CI_TTEST, mu+low_eqbound, mu+high_eqbound)
p_tost_list[count] <- max(res$TOST_p1, res$TOST_p2)
p_list[count] <- 2 * pt(-abs(t), df = n-1)
}
```
```{r, echo=FALSE, dpi=600, fig.width=6, fig.height=5}
plot(NA,
ylim = c(0, 1),
xlim = c(0, 1001),
yaxt = "n",
xaxt = "n",
ylab = "",
xlab = "Mean")
axis(1, at = seq(0,1000,100), labels = seq(140,150,1), las = 1)
axis(2, at = seq(0,1,0.1), labels = seq(0,1,0.1), las = 1)
lines(sgpv_list, type="l", col = "darkgrey", lwd = 3, lty = 3)
lines(p_tost_list, lwd = 3)
#abline(h = c(0.975, 0.5, 0.025), col = "grey", lwd = 1, lty = 3)
p_tost_list <- numeric(length(seq(140, 150, step)))
sgpv_list <- numeric(length(seq(140, 150, step)))
p_list <- numeric(length(seq(140, 150, step)))
t_list <- numeric(length(seq(140, 150, step)))
count <- 0
for(i in seq(140, 150, step)){
count <- count + 1
m <- i
mu <- 145
sd <- 500
n <- 1000000
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
invisible(capture.output(res <- TOSTone.raw(m = m,
mu = mu,
sd = sd,
n = n,
low_eqbound = low_eqbound,
high_eqbound = high_eqbound,
alpha = alpha,
plot = FALSE
)))
t <- (m - mu)/(sd/sqrt(n))
t_list[count] <- t
sgpv_list[count] <- p_delta(mu+res$LL_CI_TTEST, mu+res$UL_CI_TTEST, mu+low_eqbound, mu+high_eqbound)
p_tost_list[count] <- max(res$TOST_p1, res$TOST_p2)
p_list[count] <- 2 * pt(-abs(t), df = n-1)
}
```
```{r, echo=FALSE, dpi=600, fig.width=6, fig.height=5}
plot(sgpv_list,
p_tost_list,
type="l",
lwd = 3,
ylim = c(0, 1),
xlim = c(0, 1),
# yaxt = "n",
# xaxt = "n",
ylab = "TOST p-value",
xlab = "SGPV")
p_tost_list <- numeric(length(seq(140, 150, step)))
sgpv_list <- numeric(length(seq(140, 150, step)))
p_list <- numeric(length(seq(140, 150, step)))
t_list <- numeric(length(seq(140, 150, step)))
count <- 0
for(i in seq(140, 150, step)){
count <- count + 1
m <- i
mu <- 145
sd <- 2
n <- 30
low_eqbound = -2
high_eqbound = 2
alpha = 0.05
invisible(capture.output(res <- TOSTone.raw(m = m,
mu = mu,
sd = sd,
n = n,
low_eqbound = low_eqbound,
high_eqbound = high_eqbound,
alpha = alpha,
plot = FALSE
)))
t <- (m - mu)/(sd/sqrt(n))
t_list[count] <- t
sgpv_list[count] <- p_delta(mu+res$LL_CI_TTEST, mu+res$UL_CI_TTEST, mu+low_eqbound, mu+high_eqbound)
p_tost_list[count] <- max(res$TOST_p1, res$TOST_p2)
p_list[count] <- 2 * pt(-abs(t), df = n-1)
}
```
```{r, echo=FALSE, dpi=600, fig.width=6, fig.height=5}
plot(sgpv_list,
p_tost_list,
type="l",
lwd = 3,
ylim = c(0, 1),
xlim = c(0, 1),
# yaxt = "n",
# xaxt = "n",
ylab = "TOST p-value",
xlab = "SGPV")
update.packages(ask=FALSE,checkBuilt=TRUE)
library(Rcmdr)
library(Routliers)
library(Routliers)
A=rnorm(100)
B=rnorm(100)
data=c(A,B)
outliers_bivar(data)
data=cbind(A,B)
outliers_bivar(data)
library(Routliers)
A=rnorm(100)
B=rnorm(100)
data=cbind(A,B)
outliers_bivar(data)
Res1=outliers_bivar(data,method="MMCD",h=1)
Res2=outliers_bivar(data,method="Mahalanobis")
Res1=outliers_bivar(data,method="MMCD",h=1)
library(Routliers)
A=rnorm(50)
B=rnorm(50)
data=cbind(A,B)
Res1=outliers_bivar(data,method="MMCD",h=1)
output<-cov.mcd(data,cor=FALSE,quantile.used=nrow(dat)*h)
h=1
output<-cov.mcd(data,cor=FALSE,quantile.used=nrow(dat)*h)
library(MASS)
output<-cov.mcd(data,cor=FALSE,quantile.used=nrow(dat)*h)
nrow(data)
output<-cov.mcd(data,cor=FALSE,quantile.used=nrow(data)*h)
h=.99
output<-cov.mcd(data,cor=FALSE,quantile.used=nrow(data)*h)
A=rnorm(1000000,100,15)
plot(density(A))
plot(density(A),xlim=c(0,150))
B=A-100
lines(density(B),col="pink")
plot(density(A),xlim=c(-100,150))
lines(density(B),col="pink")
sd(B)
C=B/sd(B)
lines(density(B),col="blue")
plot(density(A),xlim=c(-100,150))
lines(density(B),col="pink")
lines(density(C),col="blue")
plot(density(A),xlim=c(-100,150),ylim=c(0,.5))
lines(density(B),col="pink")
lines(density(C),col="blue")
plot(density(A),xlim=c(-100,150),ylim=c(0,.4))
lines(density(B),col="pink")
lines(density(C),col="blue")
A=c(5,4,6,3,7)
plot(density(A),xlim=c(-100,150),ylim=c(0,.4))
B=A-5
lines(density(B),col="pink")
plot(density(A),xlim=c(-100,150),ylim=c(0,.4))
lines(density(B),col="pink")
lines(density(C),col="blue")
C=B/sd(B)
plot(density(A),xlim=c(-100,150),ylim=c(0,.4))
lines(density(B),col="pink")
lines(density(C),col="blue")
rep(11,3)
A=c(rep(11,3),rep(12,9),rep(13,8),rep(14,9),rep(15,4),rep(16,5),rep(17,5),rep(18,2))
hist(A)
barplot(A)
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
library(package.examens)
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
library(knitr)
library(car)
library(nortest)
library(package.examens)
library(stats)
library(ltm)
knitr::kable
knitr::opts_chunk$set(echo = TRUE)
competence=c(13,6,11,14,13,11,16,20,14,12,5,13,12,9,18,10,12,10,10,13,19,10,8,7,17,9,18,6,15,10)
motivation=c(7,3,1,9,4,7,5,10,8,4,2,5,4,6,10,1,10,8,1,3,8,2,1,3,8,8,7,2,3,5)
pred_AO=cbind(competence,motivation)
VD_AO=c(17,7,3,20,4,18,6,19,16,5,2,13,9,9,17,4,19,12,2,4,15,3,2,10,16,15,13,2,3,9)
data_AO=data.frame(pred_AO,VD_AO)
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
data_AO_clean
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
data_AO_clean=exclu_outliers_AO$clean_data
data_AO_clean
regression=regression(data_AO_clean$VD_AO,pred=c(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
cbind(data_AO_clean$competence,data_AO_clean$motivation)
regression=regression(data_AO_clean$VD_AO,pred=cbind(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
regression
regression=regression(data_AO_clean$VD_AO,pred=cbind(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
regression
regression
regression=regression(data_AO_clean$VD_AO,pred=cbind(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
regression
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
data_AO_clean=exclu_outliers_AO$clean_data
regression=regression(data_AO_clean$VD_AO,pred=cbind(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
regression
regression
regression
regression
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
data_AO_clean=exclu_outliers_AO$clean_data
regression=regression(data_AO_clean$VD_AO,pred=cbind(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
R
regression
library(knitr)
library(car)
library(nortest)
library(package.examens)
library(stats)
library(ltm)
knitr::kable
knitr::opts_chunk$set(echo = TRUE)
cotation=function(QCM=TRUE,noteglobale=FALSE,soustitre="Cotation : ",pts,nb_QCM){
note=NULL
if (noteglobale==FALSE){
if (QCM==TRUE){
note=paste0(soustitre,"+",pts," si réponse correcte ; -",round(pts/(nb_QCM-1),3)," si réponse incorrecte ; 0 en cas d'abstention.")
} else if (QCM==FALSE){
note=paste0(soustitre,"+",pts," si réponse correcte ; 0 en cas d'abstention ou de reponse erronée.")}
} else if (noteglobale==TRUE) {
QCM=FALSE
note=paste0("Note globale : +",pts,". Pas de point négatif.")
}
cat(note)
invisible(list(note=note,pts=pts))
}
regression=regression(data_AO_clean$VD_AO,pred=cbind(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
competence=c(13,6,11,14,13,11,16,20,14,12,5,13,12,9,18,10,12,10,10,13,19,10,8,7,17,9,18,6,15,10)
motivation=c(7,3,1,9,4,7,5,10,8,4,2,5,4,6,10,1,10,8,1,3,8,2,1,3,8,8,7,2,3,5)
pred_AO=cbind(competence,motivation)
VD_AO=c(17,7,3,20,4,18,6,19,16,5,2,13,9,9,17,4,19,12,2,4,15,3,2,10,16,15,13,2,3,9)
data_AO=data.frame(pred_AO,VD_AO)
#write.table(data_AO,"data_AO_V6.txt",sep=";",dec=",")
exclu_outliers_AO=outliers_exclusion(data_AO,VD=VD_AO,pred=pred_AO)
data_AO_clean=exclu_outliers_AO$clean_data
regression=regression(data_AO_clean$VD_AO,pred=cbind(data_AO_clean$competence,data_AO_clean$motivation),alpha=.05)
regression
library(package.examens)
library(package.examens)
install.packages("data.table")
# 1) download needed packages
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen",force=TRUE)
# 2) create the package directory
setwd("C:/Users/Marie/Documents/Github_projects/")
devtools::create("newpackage")
setwd("C:/Users/Marie/Documents/Github_projects/package.examens/")
devtools::document()
devtools::check()
setwd("C:/Users/Marie/Documents/Github_projects/")
devtools::create("package.examens")
setwd("C:/Users/Marie/Documents/Github_projects/package.examens/")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
